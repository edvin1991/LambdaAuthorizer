AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Specification template describing your function.
Parameters:
  CognitoAppClientId:
    Type: String
    Default: 32un998vgv93lt3sd56cff7oqi
  DefaultCallLimit:
    Type: Number
    Default: 50
  CognitoUserPoolId:
    Type: String
    Default: eu-central-1_jFzGA5opU
  CognitoRegion:
    Type: String
    Default: eu-centra-1
Resources:
  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: s3://ehallvax-authorizer/89af31ece7984c54fca4a7a5fac6d5d4
      Description: Lambda function that serves as an authorizer with customm logic
        for API Gateway
      MemorySize: 256
      Timeout: 5
      Role:
        Fn::GetAtt:
        - LambdaAuthorizerRole
        - Arn
      Environment:
        Variables:
          COGNITO_REGION:
            Ref: CognitoRegion
          APP_CLIENT_ID:
            Ref: CognitoAppClientId
          DDB_GROUP_TABLE:
            Ref: DdbResourceGroupRelationship
          DDB_USAGE_TABLE:
            Ref: DdbUsageTable
          DEFAULT_CALL_LIMIT:
            Ref: DefaultCallLimit
          USERPOOL_ID:
            Ref: CognitoUserPoolId
      Layers:
      - Ref: CognitoJwt
      - Ref: DynamoDbJson
  CognitoJwt:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Lambda Layer for CognitoJwt package
      ContentUri: s3://ehallvax-authorizer/5cd8b9c813ade3a40ae1229dfde13f4b
      CompatibleRuntimes:
      - python3.8
      - python3.7
  DynamoDbJson:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Lambda Layer DynamoDbJson package
      ContentUri: s3://ehallvax-authorizer/049ea8aa794175c05723a933f3a9630d
      CompatibleRuntimes:
      - python3.8
      - python3.7
  DdbUsageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: PrincipalId
        AttributeType: S
      KeySchema:
      - AttributeName: PrincipalId
        KeyType: HASH
  DdbResourceGroupRelationship:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: Resource
        AttributeType: S
      KeySchema:
      - AttributeName: Resource
        KeyType: HASH
  LambdaAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaAuthorizerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - Ref: LambdaCWPermissionsPolicy
      - Ref: LambdaDdbPermissionsPolicy
  LambdaCWPermissionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          - logs:GetLogEvents
          - logs:CreateLogGroup
          Resource:
          - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
  LambdaDdbPermissionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          Resource:
            Fn::GetAtt:
            - DdbUsageTable
            - Arn
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          Resource:
            Fn::GetAtt:
            - DdbResourceGroupRelationship
            - Arn
