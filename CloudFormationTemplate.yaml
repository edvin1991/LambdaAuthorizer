AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.
Parameters:
  CognitoAppClientId:
    Type: String
  DefaultCallLimit:
    Type: Number
    Default: 50
  CognitoUserPoolId:
    Type: String
  CognitoRegion:
    Type: String
Resources:
#----------------------------Lambda Functions----------------------------
  LambdaAuthorizer:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: ./LambdaCode
      Description: 'Lambda function that serves as an authorizer with customm logic for API Gateway'
      MemorySize: 256
      Timeout: 5
      Role: !GetAtt LambdaAuthorizerRole.Arn
      Environment:
        Variables:
          COGNITO_REGION: !Ref CognitoRegion
          APP_CLIENT_ID: !Ref CognitoAppClientId
          DDB_GROUP_TABLE: !Ref DdbResourceGroupRelationship
          DDB_USAGE_TABLE: !Ref DdbUsageTable
          DEFAULT_CALL_LIMIT: !Ref DefaultCallLimit
          USERPOOL_ID: !Ref CognitoUserPoolId
      Layers:
        - !Ref CognitoJwt
        - !Ref DynamoDbJson
#-----------------------------Lambda Layers------------------------------
  CognitoJwt:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Lambda Layer for CognitoJwt package
      ContentUri: ./layers/cognitoJwt.zip
      CompatibleRuntimes:
        - python3.8
        - python3.7
  DynamoDbJson:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Lambda Layer DynamoDbJson package
      ContentUri: ./layers/dynamodb-json.zip
      CompatibleRuntimes:
        - python3.8
        - python3.7
#----------------------------DynamoDb Tables-----------------------------
  DdbUsageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "PrincipalId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "PrincipalId"
          KeyType: "HASH"
  DdbResourceGroupRelationship:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "Resource"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Resource"
          KeyType: "HASH"
#--------------------------------Roles-----------------------------------
  LambdaAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'LambdaAuthorizerRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaCWPermissionsPolicy
        - !Ref LambdaDdbPermissionsPolicy
#-------------------------------Policies---------------------------------
  LambdaCWPermissionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'logs:GetLogEvents'
              - 'logs:CreateLogGroup'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
  LambdaDdbPermissionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - 
            Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:GetItem'
            Resource: !GetAtt 'DdbUsageTable.Arn'
          - 
            Effect: Allow
            Action:
              - 'dynamodb:GetItem'
            Resource: !GetAtt 'DdbResourceGroupRelationship.Arn'
